{"version":3,"file":"components-atoms-Modal-Modal-stories.e88c293fe4a52321074f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://challenge/.","webpack://challenge/./src/components/atoms/Modal/Modal.tsx"],"sourcesContent":[null,"// import React, { FC } from \"react\";\n// import styled from \"styled-components\";\n\n// type ModalProps = {\n//   isOpen: boolean;\n//   children?: React.ReactNode;\n// }\n\n\n// const ModalContainer = styled.div<ModalProps>`\n//   display: ${({ isOpen }) => (isOpen ? \"block\" : \"none\")};\n//   position: fixed;\n//   top: 50%;\n//   left: 50%;\n//   transform: translate(-50%, -50%);\n//   width: 23.4375rem;\n//   height: 23.875rem;\n//   flex-shrink: 0;\n//   background: #FFF;\n//   box-shadow: 0px 0px 25px 10px rgba(0, 0, 0, 0.10);\n//   z-index: 999;\n// `;\n\n// const closeIcon = '/assets/icons/Vector.svg'\n\n// const Modal: FC<ModalProps> = ({ isOpen, children }) => {\n//   return (\n//     <ModalContainer isOpen={isOpen}>\n//       {children}\n//     </ModalContainer>\n//   );\n// };\n\n// export default Modal;\n\nimport React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\ntype ModalProps = {\n  isOpen: boolean;\n  onClose?: () => void; // Funci√≥n para cerrar el modal\n  children?: React.ReactNode;\n};\n\nconst ModalContainer = styled.div<ModalProps>`\n  display: ${({ isOpen }) => (isOpen ? \"block\" : \"none\")};\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 23.4375rem;\n  height: 23.875rem;\n  flex-shrink: 0;\n  background: #FFF;\n  box-shadow: 0px 0px 25px 10px rgba(0, 0, 0, 0.10);\n  z-index: 999;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1rem;\n`;\n\nconst CloseIcon = styled.img`\n  width: 1rem;\n  height: 1rem;\n`;\n\nconst closeIcon = \"/assets/icons/Vector.svg\";\n\nconst Modal: FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  return (\n    <ModalContainer isOpen={isOpen}>\n      <CloseButton onClick={onClose}>\n        <CloseIcon src={closeIcon} alt=\"Close\" />\n      </CloseButton>\n      {children}\n    </ModalContainer>\n  );\n};\n\nexport default Modal;\n"],"names":[],"sourceRoot":""}