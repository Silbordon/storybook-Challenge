{"version":3,"file":"src_components_molecules_MainModal_MainModal_tsx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AA/CA;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAcA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AA5DA;AA8DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA","sources":["webpack://challenge/./src/components/atoms/InputText/FloatingLabelInput.tsx","webpack://challenge/./src/components/atoms/InputWithIcon/InputPass.tsx","webpack://challenge/./src/components/atoms/Subtitle/Subtitle.tsx","webpack://challenge/./src/components/molecules/MainModal/MainModal.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\n/**\n * Floating Label Input component\n * @param labelText - string with label text\n * @param placeholderText - string with placeholder text\n */\n\n\ntype FloatingLabelInputProps = {\n  labelText: string;\n  placeholderText: string;\n};\n\nconst FloatingLabelInputContainer = styled.div`\n  position: relative;\n  margin-bottom: 1.5rem;\n`;\n\nconst Input = styled.input<{ isError: boolean }>`\n  width: 100%;\n  height: 3.5rem;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n  background: #f0f0f0;\n  color: rgba(0, 0, 0, 0.54);\n  font-family: Roboto;\n  font-size: 1rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1rem;\n  margin-top: 0.5rem;\n  padding: 1.5rem 0.5rem 0.5rem 1rem;\n  box-sizing: border-box;\n  transition: border-color 0.3s ease-in-out;\n\n  &:focus {\n    outline: none;\n    border-bottom-width: 2px;\n    border-bottom-color: ${({ isError }) => (isError ? \"red\" : \"#2979FF\")};\n  }\n\n  &:not(:placeholder-shown) + label {\n    transform: translateY(-130%) scale(0.75);\n    color: ${({ isError }) => (isError ? \"red\" : \"#2979FF\")};\n  }\n\n  ${({ isError }) =>\n    isError &&\n    css`\n      border-color: red;\n    `}\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 0.8rem;\n  left: 1rem;\n  color: #2979ff;\n  font-family: Roboto;\n  font-size: 0.75rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 0.875rem;\n  transition: 0.3s ease-out;\n  transform-origin: top left;\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n  font-family: Roboto;\n  font-size: 0.7rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 0.875rem;\n`;\n\nconst FloatingLabelInput: React.FC<FloatingLabelInputProps> = ({\n  labelText,\n  placeholderText,\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [textError, setTextError] = useState(\"\");\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n    if (isError) {\n      setIsError(false);\n    }\n  };\n\n  const handleInputBlur = () => {\n    handleInputValidation();\n  };\n\n  const handleInputValidation = () => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    if (value.trim() === \"\") {\n      setIsError(true);\n      setTextError(\"El campo no puede estar vacío\");\n    } else if (!emailRegex.test(value.trim())) {\n      setIsError(true);\n      setTextError(\"Formato de Email incorrecto\");\n    } else {\n      setIsError(false);\n    }\n  };\n\n  return (\n    <FloatingLabelInputContainer>\n      <Input\n        type=\"email\"\n        value={value}\n        isError={isError}\n        placeholder={placeholderText}\n        onChange={handleInputChange}\n        onBlur={handleInputBlur}\n      />\n      <Label>{labelText}</Label>\n      {isError && <ErrorMessage>{textError}</ErrorMessage>}\n    </FloatingLabelInputContainer>\n  );\n};\n\nexport default FloatingLabelInput;\n","import React, { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\n/**\n * Input Password componente with eye icon\n * @param placeholderText - string with placeholder text\n * @param hasValue - boolean\n */\n\ntype LabelInputProps = {\n  placeholderText: string;\n};\n\ntype InputProps = {\n  isError?: boolean;\n};\n\nconst InputPassContainer = styled.div`\n  position: relative;\n  margin-bottom: 1rem;\n`;\n\nconst Input = styled.input<InputProps>`\n  width: 100%;\n  height: 3.5rem;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n  background: #f0f0f0;\n  color: rgba(0, 0, 0, 0.54);\n  font-family: Roboto;\n  font-size: 1rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1rem;\n  padding: 1rem 3rem 1rem 1rem;\n  box-sizing: border-box;\n  transition: border-color 0.3s ease-in-out;\n  position: relative;\n\n  &:focus {\n    outline: none;\n    border-bottom-width: 2px;\n    border-bottom-color: ${({ isError }) => (isError ? \"red\" : \"#2979FF\")};\n  }\n\n  ${({ isError }) =>\n    isError &&\n    css`\n      + label {\n        transform: translateY(-130%) scale(0.75);\n        color: red;\n        border-color: red;\n      }\n    `}\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n  font-family: Roboto;\n  font-size: 0.7rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 0.875rem;\n`;\n\nconst EyeIcon = styled.img<InputProps>`\n  position: absolute;\n  top: 50%;\n  right: 1rem;\n  transform: translateY(-50%);\n  cursor: pointer;\n  z-index: 1;\n\n  &.error {\n    top: 40%;\n  }\n`;\n\nconst InputPass: React.FC<LabelInputProps> = ({ placeholderText }) => {\n  const [value, setValue] = useState(\"\");\n  const [isFocused, setIsFocused] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [eyeIconSrc, setEyeIconSrc] = useState(\"/assets/icons/eye2.svg\");\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n    if (isError) {\n      setIsError(false);\n    }\n  };\n\n  const handleInputFocus = () => {\n    setIsFocused(true);\n  };\n\n  const handleInputBlur = () => {\n    setIsFocused(false);\n    handleInputValidation();\n  };\n\n  const handleInputValidation = () => {\n    if (value.trim() === \"\") {\n      setIsError(true);\n    } else {\n      setIsError(false);\n    }\n  };\n\n  const togglePassVisibility = () => {\n    setShowPassword((prevShowPassword) => !prevShowPassword);\n    setEyeIconSrc((prevIconSrc) =>\n      prevIconSrc === \"/assets/icons/eye2.svg\"\n        ? \"/assets/icons/eyewithslash.svg\"\n        : \"/assets/icons/eye2.svg\"\n    );\n  };\n\n  return (\n    <InputPassContainer>\n      <Input\n        type={showPassword ? \"text\" : \"password\"}\n        value={value}\n        isError={isError}\n        placeholder={isFocused ? \"\" : placeholderText}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n      />\n      <EyeIcon\n        src={eyeIconSrc}\n        alt=\"Toggle Password Visibility\"\n        onClick={togglePassVisibility}\n        className={isError ? \"error\" : \"\"}\n      />\n      {isError && <ErrorMessage>El campo no puede estar vacío</ErrorMessage>}\n    </InputPassContainer>\n  );\n};\n\nexport default InputPass;\n","import styled from \"styled-components\";\n\n/**\n * Standard prototype that represents the Subtitle with a specific font size and line height and weight and text provided as properties.\n * @param text - the text content\n * @param color - (optional) text color content\n */\n\ntype SubtitleProps = {\n  text: string;\n  color?: string;\n};\n\nconst SubtitleStyleComponent = styled.div<{ color?: string }>`\n  color: ${(props) => (props.color ? props.color : \"#646565\")};\n  /* font-family: \"Open Sans\", sans-serif; */\n  font-size: 0.875rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.125rem; \n`;\n\nconst Subtitle: React.FC<SubtitleProps> = ({ text, color }) => {\n  return <SubtitleStyleComponent color={color}>{text}</SubtitleStyleComponent>;\n};\n\nexport default Subtitle;\n","import FloatingLabelInput from \"../../atoms/InputText/FloatingLabelInput\";\nimport InputPass from \"../../atoms/InputWithIcon/InputPass\";\nimport Subtitle from \"../../atoms/Subtitle/Subtitle\";\n\n\n/**\n *Main Modal component with two Input compontents. the FloatinglabelImput component and Input Password component.\n */\n\n\nconst MainModal = () => {\n  return (\n    <div>\n      <Subtitle text='Please complete Email and Password'/>\n      <br />\n      <FloatingLabelInput labelText=\"Email\" placeholderText=\"email@email.com\" />\n      <InputPass placeholderText=\"Password\" />\n    </div>\n  );\n};\n\nexport default MainModal;\n"],"names":[],"sourceRoot":""}