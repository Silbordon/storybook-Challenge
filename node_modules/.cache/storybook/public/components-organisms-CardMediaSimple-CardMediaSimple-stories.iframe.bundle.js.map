{"version":3,"file":"components-organisms-CardMediaSimple-CardMediaSimple-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAzBA;AA2BA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA","sources":["webpack://challenge/.","webpack://challenge/./src/components/atoms/Avatar/Avatar.tsx","webpack://challenge/./src/components/atoms/Card/Card.tsx","webpack://challenge/./src/components/atoms/IconFavorite/IconFavorite.tsx","webpack://challenge/./src/components/atoms/LinkButton/LinkButton.tsx","webpack://challenge/./src/components/atoms/Subtitle/Subtitle.tsx","webpack://challenge/./src/components/atoms/Title/Title.tsx","webpack://challenge/./src/components/molecules/FooterCard/FooterCard.tsx","webpack://challenge/./src/components/molecules/HeaderCard/HeaderCard.tsx","webpack://challenge/./src/components/organisms/CardMediaSimple/CardMediaSimple.tsx"],"sourcesContent":[null,"import React from 'react';\nimport styled from 'styled-components';\n\n/**\n * Avatar component with a dinamic image.\n * @param imagePath - the url path\n */\n\n\ntype AvatarProps = {\n  imagePath: string;\n}\n\nconst AvatarContainer = styled.div<AvatarProps>`\n  border-radius: 2.5rem;\n  width: 2.5rem;\n  height: 2.5rem;\n  flex-shrink: 0;\n  background: ${({imagePath}) => `url(${imagePath}), lightgray 50% / cover no-repeat`};\n`;\n\nconst Avatar: React.FC<AvatarProps> = ({ imagePath }) => {\n  return <AvatarContainer imagePath={imagePath} />;\n};\n\nexport default Avatar;\n\n","import React from 'react';\nimport styled from 'styled-components';\n\n/**\n *Card component with 2 versions. with and without image\n * @param imageUrl - (optional)the PathUrl if you need to add an image\n * @param children - (optional) option to add any component\n */\n\ninterface CardProps {\n  imageUrl?: string;\n  children?: React.ReactNode;\n}\n\nconst CardContainer = styled.div<{ imageUrl?: string }>`\n  width: 23.375rem;\n  min-height: ${({ imageUrl }) => (imageUrl ? '27.1875rem' : '12.625rem')};\n  flex-shrink: 0;\n  box-shadow: 0px 0px 25px 0px rgba(0, 0, 0, 0.10);\n  border-radius: 8px;\n  overflow: hidden;\n  \n  display: flex;\n  flex-direction: column;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex: 1;\n  padding: 1.2rem;\n`;\n\nconst Card: React.FC<CardProps> = ({ imageUrl, children }) => {\n  return (\n    <CardContainer imageUrl={imageUrl}>\n      {imageUrl && <Image src={imageUrl} alt=\"Card Image\" />}\n      <Content>{children}</Content>\n    </CardContainer>\n  );\n};\n\nexport default Card;\n\n\n\n","import React, { useState } from \"react\";\nimport styled, { keyframes, css } from \"styled-components\";\n\n/**\n * Icon component with toggle options.\n * @param isFilled - boolean that switches between favorite and non-favorite\n */\n\n\ninterface IconProps {\n  isFilled?: boolean;\n}\n\nconst expand = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst IconImage = styled.img<{ isExpanded: boolean }>`\n  width: 1.5rem;\n  height: 1.5rem;\n  flex-shrink: 0;\n  cursor: pointer;\n  transition: transform 0.3s ease-in-out;\n\n  ${({ isExpanded }) =>\n    isExpanded &&\n    css`\n      animation: ${css`\n          ${expand}`} 0.6s ease-in-out;\n    `}\n`;\n\nconst emptyHeart = \"/assets/icons/NoFavorite.svg\";\nconst filledHeart = \"/assets/icons/Favorite.svg\";\n\nconst IconFavorite: React.FC<IconProps> = ({ isFilled}) => {\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [filled, setFilled] = useState(isFilled);\n\n  const handleClick = () => {\n    const newFilledState = !filled;\n    setFilled(newFilledState);\n    setIsExpanded(true);\n    // Restaurar la expansión después de un tiempo para el próximo clic\n    setTimeout(() => {\n      setIsExpanded(false);\n    }, 600);\n  };\n\n\n \n  return (\n    <IconImage\n      src={filled ? filledHeart : emptyHeart}\n      alt=\"Heart Icon\"\n      onClick={handleClick}\n      isExpanded={isExpanded}\n    />\n  );\n};\n\nexport default IconFavorite;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n/**\n * Component to render a Link Button\n * @param text - string to add the button label\n * @param to - string to add the font color -var sass-\n * @param color -(optional) string to add color. This color is the same for the hover and active state in the Link underline \n */\n\nexport interface LinkButtonProps {\n  text: string;\n  to: string;\n  color?: string;\n}\n\nconst StyledLinkButton = styled(Link)<{ color?: string }>`\n  color: ${({color}) => (color ? color : \"#5DA552\")};\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 0.875rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.125rem;\n  text-decoration: none;\n  transition: border-bottom 0.3s ease-in-out;\n  cursor: pointer;\n\n  &:hover{\n    border-bottom: 2px solid ${({color}) => (color ? color : \"#5DA552\")};\n  }\n  &:active{\n    border-bottom: 2px solid ${({color}) => (color ? color : \"#5DA552\")};\n  }\n`;\n\nconst LinkButton: React.FC<LinkButtonProps> = ({ to, text, color }) => {\n  return <StyledLinkButton color={color} to={to}>{text}</StyledLinkButton>;\n};\n\nexport default LinkButton;\n","import styled from \"styled-components\";\n\n/**\n * Standard prototype that represents the Subtitle with a specific font size and line height and weight and text provided as properties.\n * @param text - the text content\n * @param color - (optional) text color content\n */\n\ntype SubtitleProps = {\n  text: string;\n  color?: string;\n};\n\nconst SubtitleStyleComponent = styled.div<{ color?: string }>`\n  color: ${(props) => (props.color ? props.color : \"#646565\")};\n  /* font-family: \"Open Sans\", sans-serif; */\n  font-size: 0.875rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.125rem; \n`;\n\nconst Subtitle: React.FC<SubtitleProps> = ({ text, color }) => {\n  return <SubtitleStyleComponent color={color}>{text}</SubtitleStyleComponent>;\n};\n\nexport default Subtitle;\n","import styled from \"styled-components\";\n\n/**\n * Standard prototype that represents the title with a specific font size and line height and weight and text provided as properties.\n * @param text - the text content\n * @param color - (optional) text color content\n */\n\ntype TitleProps = {\n  text: string;\n  color?: string;\n}\n\nconst TitleStyleComponent = styled.div<{ color?: string }>`\n  color: ${(props) => (props.color ? props.color : \"#646565\")};\n  font-size: 1.25rem;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.25rem;\n  margin-bottom: 0.25rem;\n`;\n\nconst Title: React.FC<TitleProps> = ({ text, color }) => {\n  return <TitleStyleComponent color={color}>{text}</TitleStyleComponent>;\n};\n\nexport default Title;\n","import styled from \"styled-components\";\nimport IconFavorite from \"../../atoms/IconFavorite/IconFavorite\";\nimport LinkButton from \"../../atoms/LinkButton/LinkButton\";\n\n/**\n *Footer Card component with two Links Button and IconFavorite\n */\n\nconst FooterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst LinkContainer = styled.div`\n  width: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst FooterCard = () => {\n  return (\n    <FooterContainer>\n      <LinkContainer>\n        <LinkButton to={\"*\"} text={\"ACTION 1\"} />\n        <LinkButton to={\"*\"} text={\"ACTION 2\"} />\n      </LinkContainer>\n      <IconFavorite isFilled={true} />\n    </FooterContainer>\n  );\n};\n\nexport default FooterCard;\n","import styled from \"styled-components\";\nimport Subtitle from \"../../atoms/Subtitle/Subtitle\";\nimport Avatar from \"../../atoms/Avatar/Avatar\";\nimport Title from \"../../atoms/Title/Title\";\n\n/**\n *Header Card component with Title component, Subtitle component and Avatar component.\n */\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleContainer = styled.div`\n  margin-left: 0.8rem;\n`;\n\nconst HeaderCard = () => {\n  const OvalImage = \"/assets/icons/Oval.svg\";\n\n  return (\n    <HeaderContainer>\n      <Avatar imagePath={OvalImage} />\n      <TitleContainer>\n        <Title text=\"Headline 5\" />\n        <Subtitle text=\"Subtitle\" />\n      </TitleContainer>\n    </HeaderContainer>\n  );\n};\n\nexport default HeaderCard;\n","import Card from \"../../atoms/Card/Card\";\nimport Subtitle from \"../../atoms/Subtitle/Subtitle\";\nimport FooterCard from \"../../molecules/FooterCard/FooterCard\";\nimport HeaderCard from \"../../molecules/HeaderCard/HeaderCard\";\nimport styled from \"styled-components\";\n\n/**\n *Card Media Simple component with two headerCard component, Subtitle with text and Footer card Component.\n */\n\ninterface CardProps {\n  imageUrl?: string;\n}\n\nconst CardMediaContainer = styled.div`\n  padding: 0 0.2rem;\n`;\n\nconst CardMediaSimple: React.FC<CardProps> = ({ imageUrl }) => {\n  return (\n    <Card imageUrl={imageUrl}>\n      <HeaderCard />\n      <CardMediaContainer>\n        <Subtitle text=\"Lorem ipsum dolor sit amet, consectetur adipisci elit, sed do eiusmod tempor\" />\n      </CardMediaContainer>\n      <FooterCard />\n    </Card>\n  );\n};\n\nexport default CardMediaSimple;\n"],"names":[],"sourceRoot":""}