{"version":3,"file":"components-organisms-ModalLogin-ModalLogin-stories.79c1122c02bea40e118c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA","sources":["webpack://challenge/.","webpack://challenge/./src/components/atoms/Button/Button.tsx","webpack://challenge/./src/components/atoms/LinkButton/LinkButton.tsx","webpack://challenge/./src/components/atoms/Modal/Modal.tsx","webpack://challenge/./src/components/atoms/Subtitle/Subtitle.tsx","webpack://challenge/./src/components/atoms/Title/Title.tsx","webpack://challenge/./src/components/molecules/FooterModal/FooterModal.tsx","webpack://challenge/./src/components/organisms/ModalLogin/ModalLogin.tsx"],"sourcesContent":[null,"import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.button`\n  width: 8.8125rem;\n  height: 2.5rem;\n  background-color: #5da552;\n  border-top-left-radius: 20px;\n  border-bottom-left-radius: 20px;\n  border-top-right-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: #fff;\n  text-align: center;\n  font-size: 0.75rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.125rem;\n  border: none;\n  cursor: pointer;\n  outline: none;\n  transition: background-color 0.5s, color 0.5s, border-color 0.5s;\n\n  &:hover {\n    background-color: #fff;\n    color: #5da552;\n    border: 1px solid #5da552;\n  }\n\n  &:active {\n    background-color: #fff;\n    color: #5da552;\n    border: 1px solid #5da552;\n  }\n`;\n\ntype ButtonProps = {\n  text: string;\n  onClick: () => void;\n};\n\nconst Button: FC<ButtonProps> = ({ text, onClick }) => {\n  return <StyledButton onClick={onClick}>{text}</StyledButton>;\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n/**\n * Component to render a Link Button\n * @param text - string to add the button label\n * @param to - string to add the font color -var sass-\n * @param color -(optional) string to add color. This color is the same for the hover and active state in the Link underline \n */\n\nexport interface LinkButtonProps {\n  text: string;\n  to: string;\n  color?: string;\n}\n\nconst StyledLinkButton = styled(Link)<{ color?: string }>`\n  color: ${({color}) => (color ? color : \"#5DA552\")};\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 0.875rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.125rem;\n  text-decoration: none;\n  transition: border-bottom 0.3s ease-in-out;\n  cursor: pointer;\n\n  &:hover{\n    border-bottom: 2px solid ${({color}) => (color ? color : \"#5DA552\")};\n  }\n  &:active{\n    border-bottom: 2px solid ${({color}) => (color ? color : \"#5DA552\")};\n  }\n`;\n\nconst LinkButton: React.FC<LinkButtonProps> = ({ to, text, color }) => {\n  return <StyledLinkButton color={color} to={to}>{text}</StyledLinkButton>;\n};\n\nexport default LinkButton;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Modal Component\n * @param isOpen - boolean with\n * @param onClose - funtion for modal close\n * @param children - (optional) option to add any component\n */\n\ntype ModalProps = {\n  isOpen: boolean;\n  onClose?: () => void;\n  children?: React.ReactNode;\n};\n\nconst ModalContainer = styled.div<ModalProps>`\n  display: ${({ isOpen }) => (isOpen ? \"block\" : \"none\")};\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 23.4375rem;\n  height: 23.875rem;\n  flex-shrink: 0;\n  background: #fff;\n  box-shadow: 0px 0px 25px 10px rgba(0, 0, 0, 0.1);\n  z-index: 999;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 1rem;\n  right: 0.5rem;\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1rem;\n`;\n\nconst CloseIcon = styled.img`\n  width: 1rem;\n  height: 1rem;\n`;\n\nconst closeIcon = \"/assets/icons/Vector.svg\";\n\nconst Modal: FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  return (\n    <ModalContainer isOpen={isOpen}>\n      <CloseButton onClick={onClose}>\n        <CloseIcon src={closeIcon} alt=\"Close\" />\n      </CloseButton>\n      {children}\n    </ModalContainer>\n  );\n};\n\nexport default Modal;\n","import styled from \"styled-components\";\n\n/**\n * Standard prototype that represents the Subtitle with a specific font size and line height and weight and text provided as properties.\n * @param text - the text content\n * @param color - (optional) text color content\n */\n\ntype SubtitleProps = {\n  text: string;\n  color?: string;\n};\n\nconst SubtitleStyleComponent = styled.div<{ color?: string }>`\n  color: ${(props) => (props.color ? props.color : \"#646565\")};\n  /* font-family: \"Open Sans\", sans-serif; */\n  font-size: 0.875rem;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.125rem; \n`;\n\nconst Subtitle: React.FC<SubtitleProps> = ({ text, color }) => {\n  return <SubtitleStyleComponent color={color}>{text}</SubtitleStyleComponent>;\n};\n\nexport default Subtitle;\n","import styled from \"styled-components\";\n\n/**\n * Standard prototype that represents the title with a specific font size and line height and weight and text provided as properties.\n * @param text - the text content\n * @param color - (optional) text color content\n */\n\ntype TitleProps = {\n  text: string;\n  color?: string;\n}\n\nconst TitleStyleComponent = styled.div<{ color?: string }>`\n  color: ${(props) => (props.color ? props.color : \"#646565\")};\n  font-size: 1.25rem;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.25rem;\n  margin-bottom: 0.25rem;\n`;\n\nconst Title: React.FC<TitleProps> = ({ text, color }) => {\n  return <TitleStyleComponent color={color}>{text}</TitleStyleComponent>;\n};\n\nexport default Title;\n","import React from \"react\";\nimport Button from \"../../atoms/Button/Button\";\nimport LinkButton from \"../../atoms/LinkButton/LinkButton\";\nimport styled from \"styled-components\";\n\nconst FooterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\n\nconst FooterModal = () => {\n  return (\n    <FooterContainer>\n      <LinkButton to={\"*\"} text={\"SIGN UP\"} />\n      <Button text={\"LOG IN\"} onClick={() => console.log(\"click\")} />\n    </FooterContainer>\n  );\n};\n\nexport default FooterModal;\n","import { useState } from 'react';\nimport Modal from '../../atoms/Modal/Modal';\nimport Subtitle from '../../atoms/Subtitle/Subtitle';\nimport Title from '../../atoms/Title/Title';\nimport FooterModal from '../../molecules/FooterModal/FooterModal';\nimport MainModal from '../../molecules/MainModal/MainModal';\n\n\ntype ModalLoginProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void; // Modifica el tipo de setIsOpen según tu implementación\n}\n\nconst ModalLogin: React.FC<ModalLoginProps> = ({ isOpen, setIsOpen }) => {\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  \n  return (\n    <Modal isOpen={isOpen} onClose={handleClose}>\n      <Title text='Welcome Back'/>\n            <Subtitle text='Please complete Email and Password'/>\n            <MainModal/>\n            <FooterModal />\n    </Modal>\n  );\n};\n\nexport default ModalLogin;"],"names":[],"sourceRoot":""}